# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) 
  @auth(rules: [
  { allow: public, operations: [read], provider: iam },
  { allow: private, operations: [read], provider: userPools },
  { allow: owner, operations: [read, update], provider: userPools },
  { allow: groups, groups: ["Admin"], provider: userPools }]) {
	id: ID!
	Partition: ID! @primaryKey(sortKeyFields: ["id"])
	email: String! @index(name: "ByMail", sortKeyFields: ["id"])
	name: String!
  createdOn: String
  updatedOn: String
  messages: [Msg] @hasMany
  comments: [Com] @hasMany(indexName: "ComByAuthor", fields: ["Partition","id"])
}

type Msg @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) 
  @auth(rules: [
  { allow: public, operations: [read], provider: iam },
  { allow: private, operations: [read], provider: userPools },
  { allow: owner, operations: [create, read, delete], provider: userPools },
  { allow: groups, groups: ["Admin"], provider: userPools }]) {
	id: ID!  
  authorPartition: ID!
  authorID: ID! @primaryKey(sortKeyFields: ["id"])
	author: User @belongsTo(fields: ["authorPartition","authorID"])
	text: String
  createdOn: String
  updatedOn: String
  comments: [Com] @hasMany
}

type Com @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) 
  @auth(rules: [
  { allow: public, operations: [read], provider: iam },
  { allow: private, operations: [read], provider: userPools },
  { allow: owner, operations: [create, read, delete], provider: userPools },
  { allow: groups, groups: ["Admin"], provider: userPools }]) {
	id: ID!  
  authorPartition: ID!
  authorID: ID! @index(name: "ComByAuthor", sortKeyFields: ["messageID"])
	author: User @belongsTo(fields: ["authorPartition","authorID"])
  msgAutorID: ID!
  messageID: ID! @primaryKey(sortKeyFields: ["id"])
  message: Msg @belongsTo(fields: ["msgAutorID","messageID"])
	text: String
  createdOn: String
  updatedOn: String
}